{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_APROFILE, GET_APROFILES, APROFILE_ERROR, CLEAR_APROFILE, SORT_APROFILES } from './types'; // get current recruiter profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/aprofile/me');\n    dispatch({\n      type: GET_APROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // update recruiter profile\n\nexport const createProfile = (formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/aprofile/skills', formData, config);\n    dispatch({\n      type: GET_APROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Skills Added\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add education\n\nexport const addEducation = (formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put('/api/aprofile/education', formData, config);\n    dispatch({\n      type: GET_APROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Education Added\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // clear profile \n\nexport const clearAprofile = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_APROFILE\n    });\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // add myapplication\n\nexport const addMyapplication = (id, sop) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    id,\n    sop\n  });\n\n  try {\n    const res = await axios.put('/api/aprofile/application', body, config);\n    dispatch({\n      type: GET_APROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get all profiles by given job id\n\nexport const getProfilesByJobId = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/aprofile/aprofiles/job/${id}`);\n    dispatch({\n      type: GET_APROFILES,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // sort Aprofiles\n\nexport const sortAprofiles = (jobId, sort) => async dispatch => {\n  const sortArray = sort.split(' ');\n\n  try {\n    dispatch({\n      type: SORT_APROFILES,\n      payload: {\n        jobId,\n        att: sortArray[0],\n        n: parseInt(sortArray[1])\n      }\n    });\n  } catch (err) {\n    // console.log(err);\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // reject application\n\nexport const rejectApplication = (jobId, aprofileId) => async dispatch => {\n  try {\n    await axios.put(`/api/aprofile/job/reject/${jobId}/${aprofileId}`);\n    dispatch(getProfilesByJobId(jobId));\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // shortlist application\n\nexport const shortlistApplication = (jobId, aprofileId) => async dispatch => {\n  try {\n    await axios.put(`/api/aprofile/job/shortlist/${jobId}/${aprofileId}`);\n    dispatch(getProfilesByJobId(jobId));\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // accept application\n\nexport const acceptApplication = (jobId, aprofileId) => async dispatch => {\n  try {\n    await axios.put(`/api/aprofile/job/accept/${jobId}/${aprofileId}`);\n    dispatch(getProfilesByJobId(jobId));\n  } catch (err) {\n    dispatch({\n      type: APROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/harry30225/Downloads/sem 4 stuff/dass/2019101083/frontend/src/actions/aprofile.js"],"names":["axios","setAlert","GET_APROFILE","GET_APROFILES","APROFILE_ERROR","CLEAR_APROFILE","SORT_APROFILES","getCurrentProfile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","config","post","push","errors","forEach","error","addEducation","put","clearAprofile","addMyapplication","id","sop","body","JSON","stringify","getProfilesByJobId","sortAprofiles","jobId","sort","sortArray","split","att","n","parseInt","rejectApplication","aprofileId","shortlistApplication","acceptApplication"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n    GET_APROFILE,\n    GET_APROFILES,\n    APROFILE_ERROR,\n    CLEAR_APROFILE,\n    SORT_APROFILES\n} from './types';\n\n// get current recruiter profile\nexport const getCurrentProfile = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/aprofile/me');\n        dispatch({\n            type: GET_APROFILE,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// update recruiter profile\nexport const createProfile = (formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.post('/api/aprofile/skills', formData, config);\n        dispatch({\n            type: GET_APROFILE,\n            payload: res.data\n        });\n        dispatch(setAlert(\"Skills Added\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// Add education\nexport const addEducation = (formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.put('/api/aprofile/education', formData, config);\n        dispatch({\n            type: GET_APROFILE,\n            payload: res.data\n        });\n        dispatch(setAlert(\"Education Added\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// clear profile \nexport const clearAprofile = () => async dispatch => {\n    try {\n        dispatch({ type: CLEAR_APROFILE });\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n};\n\n// add myapplication\nexport const addMyapplication = (id, sop) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    const body = JSON.stringify({ id, sop });\n    try {\n        const res = await axios.put('/api/aprofile/application', body, config);\n        dispatch({\n            type: GET_APROFILE,\n            payload: res.data\n        })\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n\n// get all profiles by given job id\nexport const getProfilesByJobId = (id) => async dispatch => {\n    try {\n        const res = await axios.get(`/api/aprofile/aprofiles/job/${id}`);\n        dispatch({\n            type: GET_APROFILES,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// sort Aprofiles\nexport const sortAprofiles = (jobId, sort) => async dispatch => {\n    const sortArray = sort.split(' ');\n\n    try {\n        dispatch({\n            type: SORT_APROFILES,\n            payload: { jobId, att: sortArray[0], n: parseInt(sortArray[1]) }\n        })\n    } catch (err) {\n        // console.log(err);\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// reject application\nexport const rejectApplication = (jobId, aprofileId) => async dispatch => {\n    try {\n        await axios.put(`/api/aprofile/job/reject/${jobId}/${aprofileId}`);\n        dispatch(getProfilesByJobId(jobId));\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// shortlist application\nexport const shortlistApplication = (jobId, aprofileId) => async dispatch => {\n    try {\n        await axios.put(`/api/aprofile/job/shortlist/${jobId}/${aprofileId}`);\n        dispatch(getProfilesByJobId(jobId));\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// accept application\nexport const acceptApplication = (jobId, aprofileId) => async dispatch => {\n    try {\n        await axios.put(`/api/aprofile/job/accept/${jobId}/${aprofileId}`);\n        dispatch(getProfilesByJobId(jobId));\n    } catch (err) {\n        dispatch({\n            type: APROFILE_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
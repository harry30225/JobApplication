{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/harry30225/Downloads/sem 4 stuff/dass/2019101083/frontend/src/components/recruiter/SelectedApplicants.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAcceptedProfileByRec } from '../../actions/aprofile';\nimport { getMadeJobs } from '../../actions/job';\nimport Spinner from '../layout/Spinner';\n\nconst SelectedApplicants = ({\n  getAcceptedProfileByRec,\n  getMadeJobs,\n  job,\n  aprofile\n}) => {\n  _s();\n\n  useEffect(() => {\n    getAcceptedProfileByRec();\n    getMadeJobs();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: job.loading || aprofile.loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 48\n    }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n      children: job.jobs.length > 0 ? /*#__PURE__*/_jsxDEV(Fragment, {\n        children: aprofile.aprofiles.length > 0 ? /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Selected Applicants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 33\n          }, this), aprofile.aprofiles.map(aprofile => /*#__PURE__*/_jsxDEV(Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container bg-light m-1 border border-success\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: aprofile.user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 24,\n                columnNumber: 45\n              }, this), job.jobs.map(job => aprofile.applications.filter(app => app.job === job._id && app.accepted === true).length > 0 && /*#__PURE__*/_jsxDEV(Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"m-0\",\n                  children: job.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 26,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"m-0\",\n                  children: job.typeofjob\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 27,\n                  columnNumber: 49\n                }, this), aprofile.applications.map(app => app.job === job._id && app.selected && /*#__PURE__*/_jsxDEV(Fragment, {\n                  children: /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"m-0\",\n                    children: app.dateofjoining\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 29,\n                    columnNumber: 53\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 28,\n                  columnNumber: 122\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 25,\n                columnNumber: 162\n              }, this)), /*#__PURE__*/_jsxDEV(Link, {\n                className: \"btn btn-info m-1\",\n                children: \"Rate the Applicant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"No Selected Applicants\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"No Jobs Made\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 63\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SelectedApplicants, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = SelectedApplicants;\nSelectedApplicants.propTypes = {\n  getAcceptedProfileByRec: PropTypes.func.isRequired,\n  getMadeJobs: PropTypes.func.isRequired,\n  job: PropTypes.object.isRequired,\n  aprofile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  job: state.job,\n  aprofile: state.aprofile\n});\n\nexport default connect(mapStateToProps, {\n  getAcceptedProfileByRec,\n  getMadeJobs\n})(SelectedApplicants);\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectedApplicants\");","map":{"version":3,"sources":["/home/harry30225/Downloads/sem 4 stuff/dass/2019101083/frontend/src/components/recruiter/SelectedApplicants.js"],"names":["React","Fragment","useEffect","PropTypes","connect","getAcceptedProfileByRec","getMadeJobs","Spinner","SelectedApplicants","job","aprofile","loading","jobs","length","aprofiles","map","user","name","applications","filter","app","_id","accepted","title","typeofjob","selected","dateofjoining","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,uBAAT,QAAwC,wBAAxC;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,OAAOC,OAAP,MAAoB,mBAApB;;AAEA,MAAMC,kBAAkB,GAAG,CAAC;AAAEH,EAAAA,uBAAF;AAA2BC,EAAAA,WAA3B;AAAwCG,EAAAA,GAAxC;AAA6CC,EAAAA;AAA7C,CAAD,KAA6D;AAAA;;AACpFR,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,uBAAuB;AACvBC,IAAAA,WAAW;AACd,GAHQ,EAGN,EAHM,CAAT;AAIA,sBACI,QAAC,QAAD;AAAA,cACKG,GAAG,CAACE,OAAJ,IAAeD,QAAQ,CAACC,OAAxB,gBAAkC,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YAAlC,gBAAiD,QAAC,QAAD;AAAA,gBAC7CF,GAAG,CAACG,IAAJ,CAASC,MAAT,GAAkB,CAAlB,gBACG,QAAC,QAAD;AAAA,kBACKH,QAAQ,CAACI,SAAT,CAAmBD,MAAnB,GAA4B,CAA5B,gBACG,QAAC,QAAD;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEKH,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuBL,QAAQ,iBAC5B,QAAC,QAAD;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,8CAAf;AAAA,sCACI;AAAA,0BAAKA,QAAQ,CAACM,IAAT,CAAcC;AAAnB;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEKR,GAAG,CAACG,IAAJ,CAASG,GAAT,CAAaN,GAAG,IAAIC,QAAQ,CAACQ,YAAT,CAAsBC,MAAtB,CAA6BC,GAAG,IAAIA,GAAG,CAACX,GAAJ,KAAYA,GAAG,CAACY,GAAhB,IAAuBD,GAAG,CAACE,QAAJ,KAAiB,IAA5E,EAAkFT,MAAlF,GAA2F,CAA3F,iBAAgG,QAAC,QAAD;AAAA,wCACjH;AAAG,kBAAA,SAAS,EAAC,KAAb;AAAA,4BAAoBJ,GAAG,CAACc;AAAxB;AAAA;AAAA;AAAA;AAAA,wBADiH,eAEjH;AAAG,kBAAA,SAAS,EAAC,KAAb;AAAA,4BAAoBd,GAAG,CAACe;AAAxB;AAAA;AAAA;AAAA;AAAA,wBAFiH,EAGhHd,QAAQ,CAACQ,YAAT,CAAsBH,GAAtB,CAA0BK,GAAG,IAAIA,GAAG,CAACX,GAAJ,KAAYA,GAAG,CAACY,GAAhB,IAAuBD,GAAG,CAACK,QAA3B,iBAAuC,QAAC,QAAD;AAAA,yCACrE;AAAG,oBAAA,SAAS,EAAC,KAAb;AAAA,8BAAoBL,GAAG,CAACM;AAAxB;AAAA;AAAA;AAAA;AAAA;AADqE;AAAA;AAAA;AAAA;AAAA,wBAAxE,CAHgH;AAAA;AAAA;AAAA;AAAA;AAAA,sBAApH,CAFL,eASI,QAAC,IAAD;AAAM,gBAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADH,CAFL;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,gBAoBO,QAAC,QAAD;AAAA,iCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AArBZ;AAAA;AAAA;AAAA;AAAA,cADH,gBA4BO,QAAC,QAAD;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AA7BsC;AAAA;AAAA;AAAA;AAAA;AADtD;AAAA;AAAA;AAAA;AAAA,UADJ;AAsCH,CA3CD;;GAAMlB,kB;;KAAAA,kB;AA6CNA,kBAAkB,CAACmB,SAAnB,GAA+B;AAC3BtB,EAAAA,uBAAuB,EAAEF,SAAS,CAACyB,IAAV,CAAeC,UADb;AAE3BvB,EAAAA,WAAW,EAAEH,SAAS,CAACyB,IAAV,CAAeC,UAFD;AAG3BpB,EAAAA,GAAG,EAAEN,SAAS,CAAC2B,MAAV,CAAiBD,UAHK;AAI3BnB,EAAAA,QAAQ,EAAEP,SAAS,CAAC2B,MAAV,CAAiBD;AAJA,CAA/B;;AAOA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BvB,EAAAA,GAAG,EAAEuB,KAAK,CAACvB,GADmB;AAE9BC,EAAAA,QAAQ,EAAEsB,KAAK,CAACtB;AAFc,CAAL,CAA7B;;AAKA,eAAeN,OAAO,CAAC2B,eAAD,EAAkB;AAAE1B,EAAAA,uBAAF;AAA2BC,EAAAA;AAA3B,CAAlB,CAAP,CAAmEE,kBAAnE,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAcceptedProfileByRec } from '../../actions/aprofile';\nimport { getMadeJobs } from '../../actions/job';\nimport Spinner from '../layout/Spinner';\n\nconst SelectedApplicants = ({ getAcceptedProfileByRec, getMadeJobs, job, aprofile }) => {\n    useEffect(() => {\n        getAcceptedProfileByRec();\n        getMadeJobs();\n    }, []);\n    return (\n        <Fragment>\n            {job.loading || aprofile.loading ? <Spinner /> : (<Fragment>\n                {job.jobs.length > 0 ? (\n                    <Fragment>\n                        {aprofile.aprofiles.length > 0 ? (\n                            <Fragment>\n                                <h1>Selected Applicants</h1>\n                                {aprofile.aprofiles.map(aprofile => (\n                                    <Fragment>\n                                        <div className=\"container bg-light m-1 border border-success\">\n                                            <h3>{aprofile.user.name}</h3>\n                                            {job.jobs.map(job => aprofile.applications.filter(app => app.job === job._id && app.accepted === true).length > 0 && <Fragment>\n                                                <p className=\"m-0\">{job.title}</p>\n                                                <p className=\"m-0\">{job.typeofjob}</p>\n                                                {aprofile.applications.map(app => app.job === job._id && app.selected && <Fragment>\n                                                    <p className=\"m-0\">{app.dateofjoining}</p>\n                                                </Fragment>)}\n                                            </Fragment>)}\n                                            <Link className=\"btn btn-info m-1\">Rate the Applicant</Link>\n                                        </div>\n                                    </Fragment>\n                                ))}\n                            </Fragment>\n                        ) : (\n                                <Fragment>\n                                    <h1>No Selected Applicants</h1>\n                                </Fragment>\n                            )}\n                    </Fragment>\n                ) : (\n                        <Fragment>\n                            <h1>No Jobs Made</h1>\n                        </Fragment>\n                    )}\n            </Fragment>)}\n        </Fragment>\n    )\n};\n\nSelectedApplicants.propTypes = {\n    getAcceptedProfileByRec: PropTypes.func.isRequired,\n    getMadeJobs: PropTypes.func.isRequired,\n    job: PropTypes.object.isRequired,\n    aprofile: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    job: state.job,\n    aprofile: state.aprofile\n});\n\nexport default connect(mapStateToProps, { getAcceptedProfileByRec, getMadeJobs })(SelectedApplicants);\n"]},"metadata":{},"sourceType":"module"}
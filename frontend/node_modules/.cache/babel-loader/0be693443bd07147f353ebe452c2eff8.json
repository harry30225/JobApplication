{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { addMyapplication } from './aprofile';\nimport { GET_JOBS, JOB_ERROR, CLEAR_JOBS, SEARCH_JOBS, SORT_JOBS, FILTER_JOBS, APPLY_JOB, EDIT_JOB, DELETE_JOB } from './types'; // get all jobs\n\nexport const getJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/job');\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get applied jobs\n\nexport const getAppliedJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/job/myapplications');\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // get jobs made by recruiters\n\nexport const getMadeJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/job/recruiter');\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // add a job\n\nexport const addJob = (formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/job', formData, config);\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Job Added\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // clear jobs\n\nexport const clearJobs = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_JOBS\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // search based on job title\n\nexport const searchTitle = search => async dispatch => {\n  try {\n    //dispatch(getJobs());\n    const res = await axios.get('/api/job');\n    dispatch({\n      type: SEARCH_JOBS,\n      payload: {\n        jobs: res.data,\n        search\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // sort jobs\n\nexport const sortJobs = sort => async dispatch => {\n  const sortArray = sort.split(' ');\n\n  try {\n    dispatch({\n      type: SORT_JOBS,\n      payload: {\n        att: sortArray[0],\n        n: parseInt(sortArray[1])\n      }\n    });\n  } catch (err) {\n    // console.log(err);\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // filter jobs\n\nexport const filterJobs = formData => async dispatch => {\n  const {\n    typeofjob,\n    usalary,\n    lsalary,\n    duration\n  } = formData;\n\n  try {\n    dispatch({\n      type: FILTER_JOBS,\n      payload: {\n        typeofjob,\n        usalary,\n        lsalary,\n        duration\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // apply job\n\nexport const applyJob = (id, sop, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    sop\n  });\n\n  try {\n    const res = await axios.put(`/api/job/applications/${id}`, body, config);\n    dispatch({\n      type: APPLY_JOB,\n      payload: {\n        id,\n        applications: res.data\n      }\n    });\n    dispatch(addMyapplication(id));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // edit job\n\nexport const editJob = (id, formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.put(`/api/job/edit/${id}`, formData, config);\n    dispatch({\n      type: EDIT_JOB,\n      payload: {\n        id,\n        job: res.data\n      }\n    });\n    dispatch(setAlert(\"Job Edit\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // delete a job\n\nexport const deleteJob = id => async dispatch => {\n  try {\n    await axios.delete(`/api/job/delete/${id}`);\n    dispatch({\n      type: DELETE_JOB,\n      payload: id\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/harry30225/Downloads/sem 4 stuff/dass/2019101083/frontend/src/actions/job.js"],"names":["axios","setAlert","addMyapplication","GET_JOBS","JOB_ERROR","CLEAR_JOBS","SEARCH_JOBS","SORT_JOBS","FILTER_JOBS","APPLY_JOB","EDIT_JOB","DELETE_JOB","getJobs","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","getAppliedJobs","getMadeJobs","addJob","formData","history","config","post","push","errors","forEach","error","clearJobs","searchTitle","search","jobs","sortJobs","sort","sortArray","split","att","n","parseInt","filterJobs","typeofjob","usalary","lsalary","duration","applyJob","id","sop","body","JSON","stringify","put","applications","editJob","job","deleteJob","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport { addMyapplication } from './aprofile';\n\nimport {\n    GET_JOBS,\n    JOB_ERROR,\n    CLEAR_JOBS,\n    SEARCH_JOBS,\n    SORT_JOBS,\n    FILTER_JOBS,\n    APPLY_JOB,\n    EDIT_JOB,\n    DELETE_JOB\n} from './types';\n\n// get all jobs\nexport const getJobs = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/job');\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n};\n\n// get applied jobs\nexport const getAppliedJobs = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/job/myapplications');\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n};\n\n// get jobs made by recruiters\nexport const getMadeJobs = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/job/recruiter');\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n}\n\n// add a job\nexport const addJob = (formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.post('/api/job', formData, config);\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n        dispatch(setAlert(\"Job Added\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// clear jobs\nexport const clearJobs = () => async dispatch => {\n    try {\n        dispatch({\n            type: CLEAR_JOBS\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// search based on job title\nexport const searchTitle = (search) => async dispatch => {\n    try {\n        //dispatch(getJobs());\n        const res = await axios.get('/api/job');\n        dispatch({\n            type: SEARCH_JOBS,\n            payload: { jobs: res.data, search }\n        })\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// sort jobs\nexport const sortJobs = (sort) => async dispatch => {\n    const sortArray = sort.split(' ');\n\n    try {\n        dispatch({\n            type: SORT_JOBS,\n            payload: { att: sortArray[0], n: parseInt(sortArray[1]) }\n        })\n    } catch (err) {\n        // console.log(err);\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// filter jobs\nexport const filterJobs = (formData) => async dispatch => {\n    const { typeofjob, usalary, lsalary, duration } = formData;\n    try {\n        dispatch({\n            type: FILTER_JOBS,\n            payload: { typeofjob, usalary, lsalary, duration }\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// apply job\nexport const applyJob = (id, sop, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    const body = JSON.stringify({ sop });\n    try {\n        const res = await axios.put(`/api/job/applications/${id}`, body, config);\n        dispatch({\n            type: APPLY_JOB,\n            payload: { id, applications: res.data }\n        })\n        dispatch(addMyapplication(id));\n        history.push('/dashboard');\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// edit job\nexport const editJob = (id, formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.put(`/api/job/edit/${id}`, formData, config);\n        dispatch({\n            type: EDIT_JOB,\n            payload: { id, job: res.data }\n        });\n        dispatch(setAlert(\"Job Edit\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// delete a job\nexport const deleteJob = (id) => async dispatch => {\n    try {\n        await axios.delete(`/api/job/delete/${id}`);\n        dispatch({\n            type: DELETE_JOB,\n            payload: id\n        })\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_JOBS, JOB_ERROR, CLEAR_JOBS, SEARCH_JOBS, SORT_JOBS } from './types'; // get all jobs\n\nexport const getJobs = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/job');\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // add a job\n\nexport const addJob = (formData, history) => async dispatch => {\n  const config = {\n    'headers': {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/job', formData, config);\n    dispatch({\n      type: GET_JOBS,\n      payload: res.data\n    });\n    dispatch(setAlert(\"Job Added\", \"success\"));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // clear jobs\n\nexport const clearJobs = () => async dispatch => {\n  try {\n    dispatch({\n      type: CLEAR_JOBS\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // search based on job title\n\nexport const searchTitle = search => async dispatch => {\n  try {\n    dispatch(getJobs());\n    dispatch({\n      type: SEARCH_JOBS,\n      payload: search\n    });\n  } catch (err) {\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // sort jobs\n\nexport const sortJobs = sort => async dispatch => {\n  const sortArray = sort.split(' ');\n\n  try {\n    {}\n    dispatch({\n      type: SORT_JOBS,\n      payload: {\n        att: sortArray[0],\n        n: parseInt(sortArray[1])\n      }\n    });\n  } catch (err) {\n    console.log(err);\n    dispatch({\n      type: JOB_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/harry30225/Downloads/sem 4 stuff/dass/2019101083/frontend/src/actions/job.js"],"names":["axios","setAlert","GET_JOBS","JOB_ERROR","CLEAR_JOBS","SEARCH_JOBS","SORT_JOBS","getJobs","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addJob","formData","history","config","post","push","errors","forEach","error","clearJobs","searchTitle","search","sortJobs","sort","sortArray","split","att","n","parseInt","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,SAAzB;AAEA,SACIC,QADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIC,WAJJ,EAKIC,SALJ,QAMO,SANP,C,CAQA;;AACA,OAAO,MAAMC,OAAO,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC3C,MAAI;AACA,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAU,UAAV,CAAlB;AACAF,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,QADD;AAELU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GAND,CAME,OAAOC,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,SADD;AAELS,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAbM,C,CAeP;;AACA,OAAO,MAAMC,MAAM,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuB,MAAMb,QAAN,IAAkB;AAC3D,QAAMc,MAAM,GAAG;AACX,eAAW;AACP,sBAAgB;AADT;AADA,GAAf;;AAKA,MAAI;AACA,UAAMb,GAAG,GAAG,MAAMT,KAAK,CAACuB,IAAN,CAAW,UAAX,EAAuBH,QAAvB,EAAiCE,MAAjC,CAAlB;AACAd,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAET,QADD;AAELU,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIAL,IAAAA,QAAQ,CAACP,QAAQ,CAAC,WAAD,EAAc,SAAd,CAAT,CAAR;AAEAoB,IAAAA,OAAO,CAACG,IAAR,CAAa,YAAb;AAEH,GAVD,CAUE,OAAOV,GAAP,EAAY;AACV,UAAMW,MAAM,GAAGX,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBY,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAInB,QAAQ,CAACP,QAAQ,CAAC0B,KAAK,CAACZ,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AACDP,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,SADD;AAELS,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CA3BM,C,CA6BP;;AACA,OAAO,MAAMU,SAAS,GAAG,MAAM,MAAMpB,QAAN,IAAkB;AAC7C,MAAI;AACAA,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEP;AADD,KAAD,CAAR;AAGH,GAJD,CAIE,OAAOU,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,SADD;AAELS,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAXM,C,CAaP;;AACA,OAAO,MAAMW,WAAW,GAAIC,MAAD,IAAY,MAAMtB,QAAN,IAAkB;AACrD,MAAI;AACAA,IAAAA,QAAQ,CAACD,OAAO,EAAR,CAAR;AACAC,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEN,WADD;AAELO,MAAAA,OAAO,EAAEkB;AAFJ,KAAD,CAAR;AAIH,GAND,CAME,OAAOhB,GAAP,EAAY;AACVN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,SADD;AAELS,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAbM,C,CAeP;;AACA,OAAO,MAAMa,QAAQ,GAAIC,IAAD,IAAU,MAAMxB,QAAN,IAAkB;AAChD,QAAMyB,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB;;AAEA,MAAI;AACA,KAAG;AACH1B,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAEL,SADD;AAELM,MAAAA,OAAO,EAAE;AAAEuB,QAAAA,GAAG,EAAEF,SAAS,CAAC,CAAD,CAAhB;AAAqBG,QAAAA,CAAC,EAAEC,QAAQ,CAACJ,SAAS,CAAC,CAAD,CAAV;AAAhC;AAFJ,KAAD,CAAR;AAIH,GAND,CAME,OAAOnB,GAAP,EAAY;AACVwB,IAAAA,OAAO,CAACC,GAAR,CAAYzB,GAAZ;AACAN,IAAAA,QAAQ,CAAC;AACLG,MAAAA,IAAI,EAAER,SADD;AAELS,MAAAA,OAAO,EAAE;AAAEG,QAAAA,GAAG,EAAED,GAAG,CAACE,QAAJ,CAAaC,UAApB;AAAgCC,QAAAA,MAAM,EAAEJ,GAAG,CAACE,QAAJ,CAAaE;AAArD;AAFJ,KAAD,CAAR;AAIH;AACJ,CAhBM","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\nimport {\n    GET_JOBS,\n    JOB_ERROR,\n    CLEAR_JOBS,\n    SEARCH_JOBS,\n    SORT_JOBS,\n} from './types';\n\n// get all jobs\nexport const getJobs = () => async dispatch => {\n    try {\n        const res = await axios.get('/api/job');\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        })\n    }\n};\n\n// add a job\nexport const addJob = (formData, history) => async dispatch => {\n    const config = {\n        'headers': {\n            'Content-Type': 'application/json',\n        }\n    };\n    try {\n        const res = await axios.post('/api/job', formData, config);\n        dispatch({\n            type: GET_JOBS,\n            payload: res.data\n        });\n        dispatch(setAlert(\"Job Added\", \"success\"));\n\n        history.push('/dashboard');\n\n    } catch (err) {\n        const errors = err.response.data.errors;\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n        }\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n};\n\n// clear jobs\nexport const clearJobs = () => async dispatch => {\n    try {\n        dispatch({\n            type: CLEAR_JOBS\n        });\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// search based on job title\nexport const searchTitle = (search) => async dispatch => {\n    try {\n        dispatch(getJobs());\n        dispatch({\n            type: SEARCH_JOBS,\n            payload: search\n        })\n    } catch (err) {\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}\n\n// sort jobs\nexport const sortJobs = (sort) => async dispatch => {\n    const sortArray = sort.split(' ');\n\n    try {\n        { }\n        dispatch({\n            type: SORT_JOBS,\n            payload: { att: sortArray[0], n: parseInt(sortArray[1]) }\n        })\n    } catch (err) {\n        console.log(err);\n        dispatch({\n            type: JOB_ERROR,\n            payload: { msg: err.response.statusText, status: err.response.status }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}